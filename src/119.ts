// 119. Pascal's Triangle II
// Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.
// In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

// Example 1:
// Input: rowIndex = 3
// Output: [1,3,3,1]

// Example 2:
// Input: rowIndex = 0
// Output: [1]

// Example 3:
// Input: rowIndex = 1
// Output: [1,1]

// Constraints:
// 0 <= rowIndex <= 33

const logf = [
  0, 0, 0.6931471805599453, 1.791759469228055, 3.1780538303479458,
  4.787491742782046, 6.579251212010101, 8.525161361065415, 10.60460290274525,
  12.801827480081469, 15.104412573075516, 17.502307845873887,
  19.987214495661885, 22.552163853123425, 25.19122118273868, 27.89927138384089,
  30.671860106080672, 33.50507345013689, 36.39544520803305, 39.339884187199495,
  42.335616460753485, 45.38013889847691, 48.47118135183523, 51.60667556776438,
  54.78472939811232, 58.00360522298052, 61.261701761002, 64.55753862700634,
  67.88974313718154, 71.25703896716801, 74.65823634883016, 78.0922235533153,
  81.55795945611504, 85.05446701758152, 88.58082754219768, 92.1361756036871,
  95.7196945421432, 99.33061245478743, 102.96819861451381, 106.63176026064346,
  110.32063971475739, 114.0342117814617, 117.77188139974507, 121.53308151543864,
  125.3172711493569, 129.12393363912722, 132.95257503561632, 136.80272263732635,
  140.67392364823425, 144.5657439463449, 148.47776695177302, 152.40959258449735,
  156.3608363030788, 160.3311282166309, 164.32011226319517, 168.32744544842765,
  172.3527971391628, 176.39584840699735, 180.45629141754378, 184.53382886144948,
  188.6281734236716, 192.7390472878449, 196.86618167289, 201.00931639928152,
  205.1681994826412, 209.34258675253685, 213.53224149456327, 217.73693411395422,
  221.95644181913033, 226.1905483237276, 230.43904356577696, 234.70172344281826,
  238.97838956183432, 243.2688490029827, 247.57291409618688, 251.8904022097232,
  256.22113555000954, 260.5649409718632, 264.9216497985528, 269.2910976510198,
  273.6731242856937, 278.0675734403661, 282.4742926876304, 286.893133295427,
  291.3239500942703, 295.76660135076065, 300.22094864701415, 304.6868567656687,
  309.1641935801469, 313.65282994987905, 318.1526396202093, 322.66349912672615,
  327.1852877037752, 331.7178871969285, 336.26118197919845, 340.815058870799,
  345.37940706226686, 349.95411804077025, 354.5390855194408, 359.1342053695754,
  363.73937555556347,
]

const binomial = (n: number, k: number): number => {
  return Math.exp(logf[n] - logf[n - k] - logf[k])
}

export const getRow = (rowIndex: number): number[] => {
  const row = Array(rowIndex + 1)

  for (let i = 0; i < row.length; i++) {
    row[i] = Math.round(binomial(rowIndex, i))
  }

  return row
}
